schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

scalar bigint

# expression to compare columns of type bigint. All fields are combined with logical 'AND'.
input bigint_comparison_exp {
  _eq: bigint
  _gt: bigint
  _gte: bigint
  _in: [bigint]
  _is_null: Boolean
  _lt: bigint
  _lte: bigint
  _neq: bigint
  _nin: [bigint]
}

# conflict action
enum conflict_action {
  # ignore the insert on this row
  ignore

  # update the row with the given values
  update
}

scalar date

# expression to compare columns of type date. All fields are combined with logical 'AND'.
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date]
}

# columns and relationships of "exceptions"
type exceptions {
  date: date
  id: uuid!
  name: String
}

# aggregated selection of "exceptions"
type exceptions_aggregate {
  aggregate: exceptions_aggregate_fields
  nodes: [exceptions!]!
}

# aggregate fields of "exceptions"
type exceptions_aggregate_fields {
  count(columns: [exceptions_select_column!], distinct: Boolean): Int
  max: exceptions_max_fields
  min: exceptions_min_fields
}

# order by aggregate values of table "exceptions"
input exceptions_aggregate_order_by {
  count: order_by
  max: exceptions_max_order_by
  min: exceptions_min_order_by
}

# input type for inserting array relation for remote table "exceptions"
input exceptions_arr_rel_insert_input {
  data: [exceptions_insert_input!]!
  on_conflict: exceptions_on_conflict
}

# Boolean expression to filter rows from the table "exceptions". All fields are combined with a logical 'AND'.
input exceptions_bool_exp {
  _and: [exceptions_bool_exp]
  _not: exceptions_bool_exp
  _or: [exceptions_bool_exp]
  date: date_comparison_exp
  id: uuid_comparison_exp
  name: text_comparison_exp
}

# unique or primary key constraints on table "exceptions"
enum exceptions_constraint {
  # unique or primary key constraint
  exceptions_pkey
}

# input type for inserting data into table "exceptions"
input exceptions_insert_input {
  date: date
  id: uuid
  name: String
}

# aggregate max on columns
type exceptions_max_fields {
  date: date
  name: String
}

# order by max() on columns of table "exceptions"
input exceptions_max_order_by {
  date: order_by
  name: order_by
}

# aggregate min on columns
type exceptions_min_fields {
  date: date
  name: String
}

# order by min() on columns of table "exceptions"
input exceptions_min_order_by {
  date: order_by
  name: order_by
}

# response of any mutation on the table "exceptions"
type exceptions_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [exceptions!]!
}

# input type for inserting object relation for remote table "exceptions"
input exceptions_obj_rel_insert_input {
  data: exceptions_insert_input!
  on_conflict: exceptions_on_conflict
}

# on conflict condition type for table "exceptions"
input exceptions_on_conflict {
  constraint: exceptions_constraint!
  update_columns: [exceptions_update_column!]!
}

# ordering options when selecting data from "exceptions"
input exceptions_order_by {
  date: order_by
  id: order_by
  name: order_by
}

# select columns of table "exceptions"
enum exceptions_select_column {
  # column name
  date

  # column name
  id

  # column name
  name
}

# input type for updating data in table "exceptions"
input exceptions_set_input {
  date: date
  id: uuid
  name: String
}

# update columns of table "exceptions"
enum exceptions_update_column {
  # column name
  date

  # column name
  id

  # column name
  name
}

# expression to compare columns of type integer. All fields are combined with logical 'AND'.
input integer_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int]
}

# mutation root
type mutation_root {
  # delete data from the table: "exceptions"
  delete_exceptions(
    # filter the rows which have to be deleted
    where: exceptions_bool_exp!
  ): exceptions_mutation_response

  # delete data from the table: "sansbury_money.accounts"
  delete_sansbury_money_accounts(
    # filter the rows which have to be deleted
    where: sansbury_money_accounts_bool_exp!
  ): sansbury_money_accounts_mutation_response

  # delete data from the table: "sansbury_money.reports"
  delete_sansbury_money_reports(
    # filter the rows which have to be deleted
    where: sansbury_money_reports_bool_exp!
  ): sansbury_money_reports_mutation_response

  # delete data from the table: "sansbury_money.transactions"
  delete_sansbury_money_transactions(
    # filter the rows which have to be deleted
    where: sansbury_money_transactions_bool_exp!
  ): sansbury_money_transactions_mutation_response

  # delete data from the table: "sansbury_money.user_reports"
  delete_sansbury_money_user_reports(
    # filter the rows which have to be deleted
    where: sansbury_money_user_reports_bool_exp!
  ): sansbury_money_user_reports_mutation_response

  # delete data from the table: "sansbury_money.users"
  delete_sansbury_money_users(
    # filter the rows which have to be deleted
    where: sansbury_money_users_bool_exp!
  ): sansbury_money_users_mutation_response

  # insert data into the table: "exceptions"
  insert_exceptions(
    # the rows to be inserted
    objects: [exceptions_insert_input!]!

    # on conflict condition
    on_conflict: exceptions_on_conflict
  ): exceptions_mutation_response

  # insert data into the table: "sansbury_money.accounts"
  insert_sansbury_money_accounts(
    # the rows to be inserted
    objects: [sansbury_money_accounts_insert_input!]!

    # on conflict condition
    on_conflict: sansbury_money_accounts_on_conflict
  ): sansbury_money_accounts_mutation_response

  # insert data into the table: "sansbury_money.reports"
  insert_sansbury_money_reports(
    # the rows to be inserted
    objects: [sansbury_money_reports_insert_input!]!

    # on conflict condition
    on_conflict: sansbury_money_reports_on_conflict
  ): sansbury_money_reports_mutation_response

  # insert data into the table: "sansbury_money.transactions"
  insert_sansbury_money_transactions(
    # the rows to be inserted
    objects: [sansbury_money_transactions_insert_input!]!

    # on conflict condition
    on_conflict: sansbury_money_transactions_on_conflict
  ): sansbury_money_transactions_mutation_response

  # insert data into the table: "sansbury_money.user_reports"
  insert_sansbury_money_user_reports(
    # the rows to be inserted
    objects: [sansbury_money_user_reports_insert_input!]!

    # on conflict condition
    on_conflict: sansbury_money_user_reports_on_conflict
  ): sansbury_money_user_reports_mutation_response

  # insert data into the table: "sansbury_money.users"
  insert_sansbury_money_users(
    # the rows to be inserted
    objects: [sansbury_money_users_insert_input!]!

    # on conflict condition
    on_conflict: sansbury_money_users_on_conflict
  ): sansbury_money_users_mutation_response

  # update data of the table: "exceptions"
  update_exceptions(
    # sets the columns of the filtered rows to the given values
    _set: exceptions_set_input

    # filter the rows which have to be updated
    where: exceptions_bool_exp!
  ): exceptions_mutation_response

  # update data of the table: "sansbury_money.accounts"
  update_sansbury_money_accounts(
    # increments the integer columns with given value of the filtered values
    _inc: sansbury_money_accounts_inc_input

    # sets the columns of the filtered rows to the given values
    _set: sansbury_money_accounts_set_input

    # filter the rows which have to be updated
    where: sansbury_money_accounts_bool_exp!
  ): sansbury_money_accounts_mutation_response

  # update data of the table: "sansbury_money.reports"
  update_sansbury_money_reports(
    # sets the columns of the filtered rows to the given values
    _set: sansbury_money_reports_set_input

    # filter the rows which have to be updated
    where: sansbury_money_reports_bool_exp!
  ): sansbury_money_reports_mutation_response

  # update data of the table: "sansbury_money.transactions"
  update_sansbury_money_transactions(
    # increments the integer columns with given value of the filtered values
    _inc: sansbury_money_transactions_inc_input

    # sets the columns of the filtered rows to the given values
    _set: sansbury_money_transactions_set_input

    # filter the rows which have to be updated
    where: sansbury_money_transactions_bool_exp!
  ): sansbury_money_transactions_mutation_response

  # update data of the table: "sansbury_money.user_reports"
  update_sansbury_money_user_reports(
    # sets the columns of the filtered rows to the given values
    _set: sansbury_money_user_reports_set_input

    # filter the rows which have to be updated
    where: sansbury_money_user_reports_bool_exp!
  ): sansbury_money_user_reports_mutation_response

  # update data of the table: "sansbury_money.users"
  update_sansbury_money_users(
    # sets the columns of the filtered rows to the given values
    _set: sansbury_money_users_set_input

    # filter the rows which have to be updated
    where: sansbury_money_users_bool_exp!
  ): sansbury_money_users_mutation_response
}

scalar numeric

# expression to compare columns of type numeric. All fields are combined with logical 'AND'.
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric]
}

# column ordering options
enum order_by {
  # in the ascending order, nulls last
  asc

  # in the ascending order, nulls first
  asc_nulls_first

  # in the ascending order, nulls last
  asc_nulls_last

  # in the descending order, nulls first
  desc

  # in the descending order, nulls first
  desc_nulls_first

  # in the descending order, nulls last
  desc_nulls_last
}

# query root
type query_root {
  # fetch data from the table: "exceptions"
  exceptions(
    # distinct select on columns
    distinct_on: [exceptions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [exceptions_order_by!]

    # filter the rows returned
    where: exceptions_bool_exp
  ): [exceptions!]!

  # fetch aggregated fields from the table: "exceptions"
  exceptions_aggregate(
    # distinct select on columns
    distinct_on: [exceptions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [exceptions_order_by!]

    # filter the rows returned
    where: exceptions_bool_exp
  ): exceptions_aggregate!

  # fetch data from the table: "exceptions" using primary key columns
  exceptions_by_pk(id: uuid!): exceptions

  # fetch data from the table: "sansbury_money.accounts"
  sansbury_money_accounts(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): [sansbury_money_accounts!]!

  # fetch aggregated fields from the table: "sansbury_money.accounts"
  sansbury_money_accounts_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): sansbury_money_accounts_aggregate!

  # fetch data from the table: "sansbury_money.accounts" using primary key columns
  sansbury_money_accounts_by_pk(id: uuid!): sansbury_money_accounts

  # fetch data from the table: "sansbury_money.reports"
  sansbury_money_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_reports_bool_exp
  ): [sansbury_money_reports!]!

  # fetch aggregated fields from the table: "sansbury_money.reports"
  sansbury_money_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_reports_bool_exp
  ): sansbury_money_reports_aggregate!

  # fetch data from the table: "sansbury_money.reports" using primary key columns
  sansbury_money_reports_by_pk(id: uuid!): sansbury_money_reports

  # fetch data from the table: "sansbury_money.transactions"
  sansbury_money_transactions(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): [sansbury_money_transactions!]!

  # fetch aggregated fields from the table: "sansbury_money.transactions"
  sansbury_money_transactions_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): sansbury_money_transactions_aggregate!

  # fetch data from the table: "sansbury_money.transactions" using primary key columns
  sansbury_money_transactions_by_pk(id: uuid!): sansbury_money_transactions

  # fetch data from the table: "sansbury_money.user_reports"
  sansbury_money_user_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): [sansbury_money_user_reports!]!

  # fetch aggregated fields from the table: "sansbury_money.user_reports"
  sansbury_money_user_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): sansbury_money_user_reports_aggregate!

  # fetch data from the table: "sansbury_money.user_reports" using primary key columns
  sansbury_money_user_reports_by_pk(id: uuid!): sansbury_money_user_reports

  # fetch data from the table: "sansbury_money.users"
  sansbury_money_users(
    # distinct select on columns
    distinct_on: [sansbury_money_users_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_users_order_by!]

    # filter the rows returned
    where: sansbury_money_users_bool_exp
  ): [sansbury_money_users!]!

  # fetch aggregated fields from the table: "sansbury_money.users"
  sansbury_money_users_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_users_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_users_order_by!]

    # filter the rows returned
    where: sansbury_money_users_bool_exp
  ): sansbury_money_users_aggregate!

  # fetch data from the table: "sansbury_money.users" using primary key columns
  sansbury_money_users_by_pk(id: uuid!): sansbury_money_users
}

# columns and relationships of "sansbury_money.accounts"
type sansbury_money_accounts {
  balance: bigint!
  id: uuid!
  name: String!
  owner: uuid!

  # An object relationship
  user: sansbury_money_users!
}

# aggregated selection of "sansbury_money.accounts"
type sansbury_money_accounts_aggregate {
  aggregate: sansbury_money_accounts_aggregate_fields
  nodes: [sansbury_money_accounts!]!
}

# aggregate fields of "sansbury_money.accounts"
type sansbury_money_accounts_aggregate_fields {
  avg: sansbury_money_accounts_avg_fields
  count(
    columns: [sansbury_money_accounts_select_column!]
    distinct: Boolean
  ): Int
  max: sansbury_money_accounts_max_fields
  min: sansbury_money_accounts_min_fields
  stddev: sansbury_money_accounts_stddev_fields
  stddev_pop: sansbury_money_accounts_stddev_pop_fields
  stddev_samp: sansbury_money_accounts_stddev_samp_fields
  sum: sansbury_money_accounts_sum_fields
  var_pop: sansbury_money_accounts_var_pop_fields
  var_samp: sansbury_money_accounts_var_samp_fields
  variance: sansbury_money_accounts_variance_fields
}

# order by aggregate values of table "sansbury_money.accounts"
input sansbury_money_accounts_aggregate_order_by {
  avg: sansbury_money_accounts_avg_order_by
  count: order_by
  max: sansbury_money_accounts_max_order_by
  min: sansbury_money_accounts_min_order_by
  stddev: sansbury_money_accounts_stddev_order_by
  stddev_pop: sansbury_money_accounts_stddev_pop_order_by
  stddev_samp: sansbury_money_accounts_stddev_samp_order_by
  sum: sansbury_money_accounts_sum_order_by
  var_pop: sansbury_money_accounts_var_pop_order_by
  var_samp: sansbury_money_accounts_var_samp_order_by
  variance: sansbury_money_accounts_variance_order_by
}

# input type for inserting array relation for remote table "sansbury_money.accounts"
input sansbury_money_accounts_arr_rel_insert_input {
  data: [sansbury_money_accounts_insert_input!]!
  on_conflict: sansbury_money_accounts_on_conflict
}

# aggregate avg on columns
type sansbury_money_accounts_avg_fields {
  balance: Float
}

# order by avg() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_avg_order_by {
  balance: order_by
}

# Boolean expression to filter rows from the table "sansbury_money.accounts". All fields are combined with a logical 'AND'.
input sansbury_money_accounts_bool_exp {
  _and: [sansbury_money_accounts_bool_exp]
  _not: sansbury_money_accounts_bool_exp
  _or: [sansbury_money_accounts_bool_exp]
  balance: bigint_comparison_exp
  id: uuid_comparison_exp
  name: text_comparison_exp
  owner: uuid_comparison_exp
  user: sansbury_money_users_bool_exp
}

# unique or primary key constraints on table "sansbury_money.accounts"
enum sansbury_money_accounts_constraint {
  # unique or primary key constraint
  accounts_pkey
}

# input type for incrementing integer columne in table "sansbury_money.accounts"
input sansbury_money_accounts_inc_input {
  balance: bigint
}

# input type for inserting data into table "sansbury_money.accounts"
input sansbury_money_accounts_insert_input {
  balance: bigint
  id: uuid
  name: String
  owner: uuid
  user: sansbury_money_users_obj_rel_insert_input
}

# aggregate max on columns
type sansbury_money_accounts_max_fields {
  balance: bigint
  name: String
}

# order by max() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_max_order_by {
  balance: order_by
  name: order_by
}

# aggregate min on columns
type sansbury_money_accounts_min_fields {
  balance: bigint
  name: String
}

# order by min() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_min_order_by {
  balance: order_by
  name: order_by
}

# response of any mutation on the table "sansbury_money.accounts"
type sansbury_money_accounts_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [sansbury_money_accounts!]!
}

# input type for inserting object relation for remote table "sansbury_money.accounts"
input sansbury_money_accounts_obj_rel_insert_input {
  data: sansbury_money_accounts_insert_input!
  on_conflict: sansbury_money_accounts_on_conflict
}

# on conflict condition type for table "sansbury_money.accounts"
input sansbury_money_accounts_on_conflict {
  constraint: sansbury_money_accounts_constraint!
  update_columns: [sansbury_money_accounts_update_column!]!
}

# ordering options when selecting data from "sansbury_money.accounts"
input sansbury_money_accounts_order_by {
  balance: order_by
  id: order_by
  name: order_by
  owner: order_by
  user: sansbury_money_users_order_by
}

# select columns of table "sansbury_money.accounts"
enum sansbury_money_accounts_select_column {
  # column name
  balance

  # column name
  id

  # column name
  name

  # column name
  owner
}

# input type for updating data in table "sansbury_money.accounts"
input sansbury_money_accounts_set_input {
  balance: bigint
  id: uuid
  name: String
  owner: uuid
}

# aggregate stddev on columns
type sansbury_money_accounts_stddev_fields {
  balance: Float
}

# order by stddev() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_stddev_order_by {
  balance: order_by
}

# aggregate stddev_pop on columns
type sansbury_money_accounts_stddev_pop_fields {
  balance: Float
}

# order by stddev_pop() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_stddev_pop_order_by {
  balance: order_by
}

# aggregate stddev_samp on columns
type sansbury_money_accounts_stddev_samp_fields {
  balance: Float
}

# order by stddev_samp() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_stddev_samp_order_by {
  balance: order_by
}

# aggregate sum on columns
type sansbury_money_accounts_sum_fields {
  balance: bigint
}

# order by sum() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_sum_order_by {
  balance: order_by
}

# update columns of table "sansbury_money.accounts"
enum sansbury_money_accounts_update_column {
  # column name
  balance

  # column name
  id

  # column name
  name

  # column name
  owner
}

# aggregate var_pop on columns
type sansbury_money_accounts_var_pop_fields {
  balance: Float
}

# order by var_pop() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_var_pop_order_by {
  balance: order_by
}

# aggregate var_samp on columns
type sansbury_money_accounts_var_samp_fields {
  balance: Float
}

# order by var_samp() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_var_samp_order_by {
  balance: order_by
}

# aggregate variance on columns
type sansbury_money_accounts_variance_fields {
  balance: Float
}

# order by variance() on columns of table "sansbury_money.accounts"
input sansbury_money_accounts_variance_order_by {
  balance: order_by
}

# columns and relationships of "sansbury_money.reports"
type sansbury_money_reports {
  accounts: uuid!
  id: uuid!
  interest_rate: numeric!
  name: String!
  transactions: uuid!

  # An array relationship
  user_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): [sansbury_money_user_reports!]!

  # An aggregated array relationship
  user_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): sansbury_money_user_reports_aggregate!
}

# aggregated selection of "sansbury_money.reports"
type sansbury_money_reports_aggregate {
  aggregate: sansbury_money_reports_aggregate_fields
  nodes: [sansbury_money_reports!]!
}

# aggregate fields of "sansbury_money.reports"
type sansbury_money_reports_aggregate_fields {
  avg: sansbury_money_reports_avg_fields
  count(
    columns: [sansbury_money_reports_select_column!]
    distinct: Boolean
  ): Int
  max: sansbury_money_reports_max_fields
  min: sansbury_money_reports_min_fields
  stddev: sansbury_money_reports_stddev_fields
  stddev_pop: sansbury_money_reports_stddev_pop_fields
  stddev_samp: sansbury_money_reports_stddev_samp_fields
  sum: sansbury_money_reports_sum_fields
  var_pop: sansbury_money_reports_var_pop_fields
  var_samp: sansbury_money_reports_var_samp_fields
  variance: sansbury_money_reports_variance_fields
}

# order by aggregate values of table "sansbury_money.reports"
input sansbury_money_reports_aggregate_order_by {
  avg: sansbury_money_reports_avg_order_by
  count: order_by
  max: sansbury_money_reports_max_order_by
  min: sansbury_money_reports_min_order_by
  stddev: sansbury_money_reports_stddev_order_by
  stddev_pop: sansbury_money_reports_stddev_pop_order_by
  stddev_samp: sansbury_money_reports_stddev_samp_order_by
  sum: sansbury_money_reports_sum_order_by
  var_pop: sansbury_money_reports_var_pop_order_by
  var_samp: sansbury_money_reports_var_samp_order_by
  variance: sansbury_money_reports_variance_order_by
}

# input type for inserting array relation for remote table "sansbury_money.reports"
input sansbury_money_reports_arr_rel_insert_input {
  data: [sansbury_money_reports_insert_input!]!
  on_conflict: sansbury_money_reports_on_conflict
}

# aggregate avg on columns
type sansbury_money_reports_avg_fields {
  interest_rate: Float
}

# order by avg() on columns of table "sansbury_money.reports"
input sansbury_money_reports_avg_order_by {
  interest_rate: order_by
}

# Boolean expression to filter rows from the table "sansbury_money.reports". All fields are combined with a logical 'AND'.
input sansbury_money_reports_bool_exp {
  _and: [sansbury_money_reports_bool_exp]
  _not: sansbury_money_reports_bool_exp
  _or: [sansbury_money_reports_bool_exp]
  accounts: uuid_comparison_exp
  id: uuid_comparison_exp
  interest_rate: numeric_comparison_exp
  name: text_comparison_exp
  transactions: uuid_comparison_exp
  user_reports: sansbury_money_user_reports_bool_exp
}

# unique or primary key constraints on table "sansbury_money.reports"
enum sansbury_money_reports_constraint {
  # unique or primary key constraint
  reports_pkey
}

# input type for inserting data into table "sansbury_money.reports"
input sansbury_money_reports_insert_input {
  accounts: uuid
  id: uuid
  interest_rate: numeric
  name: String
  transactions: uuid
  user_reports: sansbury_money_user_reports_arr_rel_insert_input
}

# aggregate max on columns
type sansbury_money_reports_max_fields {
  interest_rate: numeric
  name: String
}

# order by max() on columns of table "sansbury_money.reports"
input sansbury_money_reports_max_order_by {
  interest_rate: order_by
  name: order_by
}

# aggregate min on columns
type sansbury_money_reports_min_fields {
  interest_rate: numeric
  name: String
}

# order by min() on columns of table "sansbury_money.reports"
input sansbury_money_reports_min_order_by {
  interest_rate: order_by
  name: order_by
}

# response of any mutation on the table "sansbury_money.reports"
type sansbury_money_reports_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [sansbury_money_reports!]!
}

# input type for inserting object relation for remote table "sansbury_money.reports"
input sansbury_money_reports_obj_rel_insert_input {
  data: sansbury_money_reports_insert_input!
  on_conflict: sansbury_money_reports_on_conflict
}

# on conflict condition type for table "sansbury_money.reports"
input sansbury_money_reports_on_conflict {
  constraint: sansbury_money_reports_constraint!
  update_columns: [sansbury_money_reports_update_column!]!
}

# ordering options when selecting data from "sansbury_money.reports"
input sansbury_money_reports_order_by {
  accounts: order_by
  id: order_by
  interest_rate: order_by
  name: order_by
  transactions: order_by
  user_reports_aggregate: sansbury_money_user_reports_aggregate_order_by
}

# select columns of table "sansbury_money.reports"
enum sansbury_money_reports_select_column {
  # column name
  accounts

  # column name
  id

  # column name
  interest_rate

  # column name
  name

  # column name
  transactions
}

# input type for updating data in table "sansbury_money.reports"
input sansbury_money_reports_set_input {
  accounts: uuid
  id: uuid
  interest_rate: numeric
  name: String
  transactions: uuid
}

# aggregate stddev on columns
type sansbury_money_reports_stddev_fields {
  interest_rate: Float
}

# order by stddev() on columns of table "sansbury_money.reports"
input sansbury_money_reports_stddev_order_by {
  interest_rate: order_by
}

# aggregate stddev_pop on columns
type sansbury_money_reports_stddev_pop_fields {
  interest_rate: Float
}

# order by stddev_pop() on columns of table "sansbury_money.reports"
input sansbury_money_reports_stddev_pop_order_by {
  interest_rate: order_by
}

# aggregate stddev_samp on columns
type sansbury_money_reports_stddev_samp_fields {
  interest_rate: Float
}

# order by stddev_samp() on columns of table "sansbury_money.reports"
input sansbury_money_reports_stddev_samp_order_by {
  interest_rate: order_by
}

# aggregate sum on columns
type sansbury_money_reports_sum_fields {
  interest_rate: numeric
}

# order by sum() on columns of table "sansbury_money.reports"
input sansbury_money_reports_sum_order_by {
  interest_rate: order_by
}

# update columns of table "sansbury_money.reports"
enum sansbury_money_reports_update_column {
  # column name
  accounts

  # column name
  id

  # column name
  interest_rate

  # column name
  name

  # column name
  transactions
}

# aggregate var_pop on columns
type sansbury_money_reports_var_pop_fields {
  interest_rate: Float
}

# order by var_pop() on columns of table "sansbury_money.reports"
input sansbury_money_reports_var_pop_order_by {
  interest_rate: order_by
}

# aggregate var_samp on columns
type sansbury_money_reports_var_samp_fields {
  interest_rate: Float
}

# order by var_samp() on columns of table "sansbury_money.reports"
input sansbury_money_reports_var_samp_order_by {
  interest_rate: order_by
}

# aggregate variance on columns
type sansbury_money_reports_variance_fields {
  interest_rate: Float
}

# order by variance() on columns of table "sansbury_money.reports"
input sansbury_money_reports_variance_order_by {
  interest_rate: order_by
}

# columns and relationships of "sansbury_money.transactions"
type sansbury_money_transactions {
  category: String!
  end: date
  id: uuid!
  interval_days: Int!
  interval_months: Int!
  monthly_occurrences: Int!
  name: String
  owner: uuid!
  start: date!

  # An object relationship
  user: sansbury_money_users!
}

# aggregated selection of "sansbury_money.transactions"
type sansbury_money_transactions_aggregate {
  aggregate: sansbury_money_transactions_aggregate_fields
  nodes: [sansbury_money_transactions!]!
}

# aggregate fields of "sansbury_money.transactions"
type sansbury_money_transactions_aggregate_fields {
  avg: sansbury_money_transactions_avg_fields
  count(
    columns: [sansbury_money_transactions_select_column!]
    distinct: Boolean
  ): Int
  max: sansbury_money_transactions_max_fields
  min: sansbury_money_transactions_min_fields
  stddev: sansbury_money_transactions_stddev_fields
  stddev_pop: sansbury_money_transactions_stddev_pop_fields
  stddev_samp: sansbury_money_transactions_stddev_samp_fields
  sum: sansbury_money_transactions_sum_fields
  var_pop: sansbury_money_transactions_var_pop_fields
  var_samp: sansbury_money_transactions_var_samp_fields
  variance: sansbury_money_transactions_variance_fields
}

# order by aggregate values of table "sansbury_money.transactions"
input sansbury_money_transactions_aggregate_order_by {
  avg: sansbury_money_transactions_avg_order_by
  count: order_by
  max: sansbury_money_transactions_max_order_by
  min: sansbury_money_transactions_min_order_by
  stddev: sansbury_money_transactions_stddev_order_by
  stddev_pop: sansbury_money_transactions_stddev_pop_order_by
  stddev_samp: sansbury_money_transactions_stddev_samp_order_by
  sum: sansbury_money_transactions_sum_order_by
  var_pop: sansbury_money_transactions_var_pop_order_by
  var_samp: sansbury_money_transactions_var_samp_order_by
  variance: sansbury_money_transactions_variance_order_by
}

# input type for inserting array relation for remote table "sansbury_money.transactions"
input sansbury_money_transactions_arr_rel_insert_input {
  data: [sansbury_money_transactions_insert_input!]!
  on_conflict: sansbury_money_transactions_on_conflict
}

# aggregate avg on columns
type sansbury_money_transactions_avg_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by avg() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_avg_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# Boolean expression to filter rows from the table "sansbury_money.transactions".
# All fields are combined with a logical 'AND'.
input sansbury_money_transactions_bool_exp {
  _and: [sansbury_money_transactions_bool_exp]
  _not: sansbury_money_transactions_bool_exp
  _or: [sansbury_money_transactions_bool_exp]
  category: text_comparison_exp
  end: date_comparison_exp
  id: uuid_comparison_exp
  interval_days: integer_comparison_exp
  interval_months: integer_comparison_exp
  monthly_occurrences: integer_comparison_exp
  name: text_comparison_exp
  owner: uuid_comparison_exp
  start: date_comparison_exp
  user: sansbury_money_users_bool_exp
}

# unique or primary key constraints on table "sansbury_money.transactions"
enum sansbury_money_transactions_constraint {
  # unique or primary key constraint
  transactions_pkey
}

# input type for incrementing integer columne in table "sansbury_money.transactions"
input sansbury_money_transactions_inc_input {
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
}

# input type for inserting data into table "sansbury_money.transactions"
input sansbury_money_transactions_insert_input {
  category: String
  end: date
  id: uuid
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
  name: String
  owner: uuid
  start: date
  user: sansbury_money_users_obj_rel_insert_input
}

# aggregate max on columns
type sansbury_money_transactions_max_fields {
  category: String
  end: date
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
  name: String
  start: date
}

# order by max() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_max_order_by {
  category: order_by
  end: order_by
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
  name: order_by
  start: order_by
}

# aggregate min on columns
type sansbury_money_transactions_min_fields {
  category: String
  end: date
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
  name: String
  start: date
}

# order by min() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_min_order_by {
  category: order_by
  end: order_by
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
  name: order_by
  start: order_by
}

# response of any mutation on the table "sansbury_money.transactions"
type sansbury_money_transactions_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [sansbury_money_transactions!]!
}

# input type for inserting object relation for remote table "sansbury_money.transactions"
input sansbury_money_transactions_obj_rel_insert_input {
  data: sansbury_money_transactions_insert_input!
  on_conflict: sansbury_money_transactions_on_conflict
}

# on conflict condition type for table "sansbury_money.transactions"
input sansbury_money_transactions_on_conflict {
  constraint: sansbury_money_transactions_constraint!
  update_columns: [sansbury_money_transactions_update_column!]!
}

# ordering options when selecting data from "sansbury_money.transactions"
input sansbury_money_transactions_order_by {
  category: order_by
  end: order_by
  id: order_by
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
  name: order_by
  owner: order_by
  start: order_by
  user: sansbury_money_users_order_by
}

# select columns of table "sansbury_money.transactions"
enum sansbury_money_transactions_select_column {
  # column name
  category

  # column name
  end

  # column name
  id

  # column name
  interval_days

  # column name
  interval_months

  # column name
  monthly_occurrences

  # column name
  name

  # column name
  owner

  # column name
  start
}

# input type for updating data in table "sansbury_money.transactions"
input sansbury_money_transactions_set_input {
  category: String
  end: date
  id: uuid
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
  name: String
  owner: uuid
  start: date
}

# aggregate stddev on columns
type sansbury_money_transactions_stddev_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by stddev() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_stddev_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# aggregate stddev_pop on columns
type sansbury_money_transactions_stddev_pop_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by stddev_pop() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_stddev_pop_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# aggregate stddev_samp on columns
type sansbury_money_transactions_stddev_samp_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by stddev_samp() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_stddev_samp_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# aggregate sum on columns
type sansbury_money_transactions_sum_fields {
  interval_days: Int
  interval_months: Int
  monthly_occurrences: Int
}

# order by sum() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_sum_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# update columns of table "sansbury_money.transactions"
enum sansbury_money_transactions_update_column {
  # column name
  category

  # column name
  end

  # column name
  id

  # column name
  interval_days

  # column name
  interval_months

  # column name
  monthly_occurrences

  # column name
  name

  # column name
  owner

  # column name
  start
}

# aggregate var_pop on columns
type sansbury_money_transactions_var_pop_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by var_pop() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_var_pop_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# aggregate var_samp on columns
type sansbury_money_transactions_var_samp_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by var_samp() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_var_samp_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# aggregate variance on columns
type sansbury_money_transactions_variance_fields {
  interval_days: Float
  interval_months: Float
  monthly_occurrences: Float
}

# order by variance() on columns of table "sansbury_money.transactions"
input sansbury_money_transactions_variance_order_by {
  interval_days: order_by
  interval_months: order_by
  monthly_occurrences: order_by
}

# columns and relationships of "sansbury_money.user_reports"
type sansbury_money_user_reports {
  id: uuid!
  report: uuid!

  # An object relationship
  reportByReport: sansbury_money_reports!
  user: uuid!

  # An object relationship
  userByUser: sansbury_money_users!
}

# aggregated selection of "sansbury_money.user_reports"
type sansbury_money_user_reports_aggregate {
  aggregate: sansbury_money_user_reports_aggregate_fields
  nodes: [sansbury_money_user_reports!]!
}

# aggregate fields of "sansbury_money.user_reports"
type sansbury_money_user_reports_aggregate_fields {
  count(
    columns: [sansbury_money_user_reports_select_column!]
    distinct: Boolean
  ): Int
}

# order by aggregate values of table "sansbury_money.user_reports"
input sansbury_money_user_reports_aggregate_order_by {
  count: order_by
}

# input type for inserting array relation for remote table "sansbury_money.user_reports"
input sansbury_money_user_reports_arr_rel_insert_input {
  data: [sansbury_money_user_reports_insert_input!]!
  on_conflict: sansbury_money_user_reports_on_conflict
}

# Boolean expression to filter rows from the table "sansbury_money.user_reports".
# All fields are combined with a logical 'AND'.
input sansbury_money_user_reports_bool_exp {
  _and: [sansbury_money_user_reports_bool_exp]
  _not: sansbury_money_user_reports_bool_exp
  _or: [sansbury_money_user_reports_bool_exp]
  id: uuid_comparison_exp
  report: uuid_comparison_exp
  reportByReport: sansbury_money_reports_bool_exp
  user: uuid_comparison_exp
  userByUser: sansbury_money_users_bool_exp
}

# unique or primary key constraints on table "sansbury_money.user_reports"
enum sansbury_money_user_reports_constraint {
  # unique or primary key constraint
  user_reports_pkey
}

# input type for inserting data into table "sansbury_money.user_reports"
input sansbury_money_user_reports_insert_input {
  id: uuid
  report: uuid
  reportByReport: sansbury_money_reports_obj_rel_insert_input
  user: uuid
  userByUser: sansbury_money_users_obj_rel_insert_input
}

# response of any mutation on the table "sansbury_money.user_reports"
type sansbury_money_user_reports_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [sansbury_money_user_reports!]!
}

# input type for inserting object relation for remote table "sansbury_money.user_reports"
input sansbury_money_user_reports_obj_rel_insert_input {
  data: sansbury_money_user_reports_insert_input!
  on_conflict: sansbury_money_user_reports_on_conflict
}

# on conflict condition type for table "sansbury_money.user_reports"
input sansbury_money_user_reports_on_conflict {
  constraint: sansbury_money_user_reports_constraint!
  update_columns: [sansbury_money_user_reports_update_column!]!
}

# ordering options when selecting data from "sansbury_money.user_reports"
input sansbury_money_user_reports_order_by {
  id: order_by
  report: order_by
  reportByReport: sansbury_money_reports_order_by
  user: order_by
  userByUser: sansbury_money_users_order_by
}

# select columns of table "sansbury_money.user_reports"
enum sansbury_money_user_reports_select_column {
  # column name
  id

  # column name
  report

  # column name
  user
}

# input type for updating data in table "sansbury_money.user_reports"
input sansbury_money_user_reports_set_input {
  id: uuid
  report: uuid
  user: uuid
}

# update columns of table "sansbury_money.user_reports"
enum sansbury_money_user_reports_update_column {
  # column name
  id

  # column name
  report

  # column name
  user
}

# columns and relationships of "sansbury_money.users"
type sansbury_money_users {
  # An array relationship
  accounts(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): [sansbury_money_accounts!]!

  # An aggregated array relationship
  accounts_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): sansbury_money_accounts_aggregate!
  email: String!
  id: uuid!
  password: String!

  # An array relationship
  transactions(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): [sansbury_money_transactions!]!

  # An aggregated array relationship
  transactions_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): sansbury_money_transactions_aggregate!

  # An array relationship
  user_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): [sansbury_money_user_reports!]!

  # An aggregated array relationship
  user_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): sansbury_money_user_reports_aggregate!
}

# aggregated selection of "sansbury_money.users"
type sansbury_money_users_aggregate {
  aggregate: sansbury_money_users_aggregate_fields
  nodes: [sansbury_money_users!]!
}

# aggregate fields of "sansbury_money.users"
type sansbury_money_users_aggregate_fields {
  count(columns: [sansbury_money_users_select_column!], distinct: Boolean): Int
  max: sansbury_money_users_max_fields
  min: sansbury_money_users_min_fields
}

# order by aggregate values of table "sansbury_money.users"
input sansbury_money_users_aggregate_order_by {
  count: order_by
  max: sansbury_money_users_max_order_by
  min: sansbury_money_users_min_order_by
}

# input type for inserting array relation for remote table "sansbury_money.users"
input sansbury_money_users_arr_rel_insert_input {
  data: [sansbury_money_users_insert_input!]!
  on_conflict: sansbury_money_users_on_conflict
}

# Boolean expression to filter rows from the table "sansbury_money.users". All fields are combined with a logical 'AND'.
input sansbury_money_users_bool_exp {
  _and: [sansbury_money_users_bool_exp]
  _not: sansbury_money_users_bool_exp
  _or: [sansbury_money_users_bool_exp]
  accounts: sansbury_money_accounts_bool_exp
  email: text_comparison_exp
  id: uuid_comparison_exp
  password: text_comparison_exp
  transactions: sansbury_money_transactions_bool_exp
  user_reports: sansbury_money_user_reports_bool_exp
}

# unique or primary key constraints on table "sansbury_money.users"
enum sansbury_money_users_constraint {
  # unique or primary key constraint
  users_email_key

  # unique or primary key constraint
  users_pkey
}

# input type for inserting data into table "sansbury_money.users"
input sansbury_money_users_insert_input {
  accounts: sansbury_money_accounts_arr_rel_insert_input
  email: String
  id: uuid
  password: String
  transactions: sansbury_money_transactions_arr_rel_insert_input
  user_reports: sansbury_money_user_reports_arr_rel_insert_input
}

# aggregate max on columns
type sansbury_money_users_max_fields {
  email: String
  password: String
}

# order by max() on columns of table "sansbury_money.users"
input sansbury_money_users_max_order_by {
  email: order_by
  password: order_by
}

# aggregate min on columns
type sansbury_money_users_min_fields {
  email: String
  password: String
}

# order by min() on columns of table "sansbury_money.users"
input sansbury_money_users_min_order_by {
  email: order_by
  password: order_by
}

# response of any mutation on the table "sansbury_money.users"
type sansbury_money_users_mutation_response {
  # number of affected rows by the mutation
  affected_rows: Int!

  # data of the affected rows by the mutation
  returning: [sansbury_money_users!]!
}

# input type for inserting object relation for remote table "sansbury_money.users"
input sansbury_money_users_obj_rel_insert_input {
  data: sansbury_money_users_insert_input!
  on_conflict: sansbury_money_users_on_conflict
}

# on conflict condition type for table "sansbury_money.users"
input sansbury_money_users_on_conflict {
  constraint: sansbury_money_users_constraint!
  update_columns: [sansbury_money_users_update_column!]!
}

# ordering options when selecting data from "sansbury_money.users"
input sansbury_money_users_order_by {
  accounts_aggregate: sansbury_money_accounts_aggregate_order_by
  email: order_by
  id: order_by
  password: order_by
  transactions_aggregate: sansbury_money_transactions_aggregate_order_by
  user_reports_aggregate: sansbury_money_user_reports_aggregate_order_by
}

# select columns of table "sansbury_money.users"
enum sansbury_money_users_select_column {
  # column name
  email

  # column name
  id

  # column name
  password
}

# input type for updating data in table "sansbury_money.users"
input sansbury_money_users_set_input {
  email: String
  id: uuid
  password: String
}

# update columns of table "sansbury_money.users"
enum sansbury_money_users_update_column {
  # column name
  email

  # column name
  id

  # column name
  password
}

# subscription root
type subscription_root {
  # fetch data from the table: "exceptions"
  exceptions(
    # distinct select on columns
    distinct_on: [exceptions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [exceptions_order_by!]

    # filter the rows returned
    where: exceptions_bool_exp
  ): [exceptions!]!

  # fetch aggregated fields from the table: "exceptions"
  exceptions_aggregate(
    # distinct select on columns
    distinct_on: [exceptions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [exceptions_order_by!]

    # filter the rows returned
    where: exceptions_bool_exp
  ): exceptions_aggregate!

  # fetch data from the table: "exceptions" using primary key columns
  exceptions_by_pk(id: uuid!): exceptions

  # fetch data from the table: "sansbury_money.accounts"
  sansbury_money_accounts(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): [sansbury_money_accounts!]!

  # fetch aggregated fields from the table: "sansbury_money.accounts"
  sansbury_money_accounts_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_accounts_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_accounts_order_by!]

    # filter the rows returned
    where: sansbury_money_accounts_bool_exp
  ): sansbury_money_accounts_aggregate!

  # fetch data from the table: "sansbury_money.accounts" using primary key columns
  sansbury_money_accounts_by_pk(id: uuid!): sansbury_money_accounts

  # fetch data from the table: "sansbury_money.reports"
  sansbury_money_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_reports_bool_exp
  ): [sansbury_money_reports!]!

  # fetch aggregated fields from the table: "sansbury_money.reports"
  sansbury_money_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_reports_bool_exp
  ): sansbury_money_reports_aggregate!

  # fetch data from the table: "sansbury_money.reports" using primary key columns
  sansbury_money_reports_by_pk(id: uuid!): sansbury_money_reports

  # fetch data from the table: "sansbury_money.transactions"
  sansbury_money_transactions(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): [sansbury_money_transactions!]!

  # fetch aggregated fields from the table: "sansbury_money.transactions"
  sansbury_money_transactions_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_transactions_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_transactions_order_by!]

    # filter the rows returned
    where: sansbury_money_transactions_bool_exp
  ): sansbury_money_transactions_aggregate!

  # fetch data from the table: "sansbury_money.transactions" using primary key columns
  sansbury_money_transactions_by_pk(id: uuid!): sansbury_money_transactions

  # fetch data from the table: "sansbury_money.user_reports"
  sansbury_money_user_reports(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): [sansbury_money_user_reports!]!

  # fetch aggregated fields from the table: "sansbury_money.user_reports"
  sansbury_money_user_reports_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_user_reports_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_user_reports_order_by!]

    # filter the rows returned
    where: sansbury_money_user_reports_bool_exp
  ): sansbury_money_user_reports_aggregate!

  # fetch data from the table: "sansbury_money.user_reports" using primary key columns
  sansbury_money_user_reports_by_pk(id: uuid!): sansbury_money_user_reports

  # fetch data from the table: "sansbury_money.users"
  sansbury_money_users(
    # distinct select on columns
    distinct_on: [sansbury_money_users_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_users_order_by!]

    # filter the rows returned
    where: sansbury_money_users_bool_exp
  ): [sansbury_money_users!]!

  # fetch aggregated fields from the table: "sansbury_money.users"
  sansbury_money_users_aggregate(
    # distinct select on columns
    distinct_on: [sansbury_money_users_select_column!]

    # limit the nuber of rows returned
    limit: Int

    # skip the first n rows. Use only with order_by
    offset: Int

    # sort the rows by one or more columns
    order_by: [sansbury_money_users_order_by!]

    # filter the rows returned
    where: sansbury_money_users_bool_exp
  ): sansbury_money_users_aggregate!

  # fetch data from the table: "sansbury_money.users" using primary key columns
  sansbury_money_users_by_pk(id: uuid!): sansbury_money_users
}

# expression to compare columns of type text. All fields are combined with logical 'AND'.
input text_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

scalar uuid

# expression to compare columns of type uuid. All fields are combined with logical 'AND'.
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid]
}
